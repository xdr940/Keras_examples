"""
Adapted from keras example cifar10_cnn.py
Train ResNet-18 on the CIFAR10 small images dataset.

GPU run command with Theano backend (with TensorFlow, the GPU is automatically used):
    THEANO_FLAGS=mode=FAST_RUN,device=gpu,floatX=float32 python cifar10.py
"""
from __future__ import print_function
from keras.datasets import cifar10
#Dataset of 50,000 32x32 color training images, labeled over 10 categories, and 10,000 test images
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import np_utils
from keras.callbacks import ReduceLROnPlateau, CSVLogger, EarlyStopping
import pickle
import matplotlib.pyplot as plt
import os
import numpy as np
import resnet


lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1), cooldown=0, patience=5, min_lr=0.5e-6)
early_stopper = EarlyStopping(min_delta=0.001, patience=10)
csv_logger = CSVLogger('resnet18_cifar10.csv')

BATCH_SIZE = 32
NUM_CLASSES = 10
NUM_EPOCHS = 10
data_augmentation = False

# input image dimensions
img_rows, img_cols = 32, 32
# The CIFAR10 images are RGB.
img_channels = 3

# The data, shuffled and split between train and test sets:
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

# Convert class vectors to binary class matrices.
Y_train = np_utils.to_categorical(y_train, NUM_CLASSES)
Y_test = np_utils.to_categorical(y_test, NUM_CLASSES)

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

# subtract mean and normalize
mean_image = np.mean(X_train, axis=0)
X_train -= mean_image
X_test -= mean_image
X_train /= 128.
X_test /= 128.

X_train=X_train[0:000]
Y_train=Y_train[0:000]
X_test=X_test[0:100]
Y_test=Y_test[0:100]



model = resnet.ResnetBuilder.build_resnet_18((img_channels, img_rows, img_cols), NUM_CLASSES)
model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


modelfile = 'modelweight_1percent.model' #神经网络权重保存
file_path_history = 'historyfile.bin'#保存history

if not data_augmentation:
    print('Not using data augmentation.')
    if os.path.exists(modelfile):  # 如果存在之前训练的权重矩阵，载入模型
        print('loaded modelfile')
        model.load_weights(modelfile)
    else:  # 否则训练
        history=model.fit(X_train, Y_train,
                  batch_size=BATCH_SIZE,
                  epochs=NUM_EPOCHS,
                  validation_data=(X_test, Y_test),
                  shuffle=True,
                  callbacks=[lr_reducer, early_stopper, csv_logger])
        model.save_weights(modelfile)  # 保存模型权重
        historyfile = open(file_path_history, 'wb')
        pickle.dump(history, historyfile)
        historyfile.close()


else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=False)  # randomly flip images

    # Compute quantities required for featurewise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(X_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(X_train, Y_train, batch_size=BATCH_SIZE),
                        steps_per_epoch=X_train.shape[0] // BATCH_SIZE,
                        validation_data=(X_test, Y_test),
                        epochs=NUM_EPOCHS, verbose=1, max_q_size=100,
                        callbacks=[lr_reducer, early_stopper, csv_logger])


print('开始验证')
score = model.evaluate(X_test, Y_test, verbose=1)
print('验证结果')
print("Test score:", score[0])
print("Test accuracy:", score[1])



if os.path.exists(file_path_history):#如果存在之前训练的history
    historyfile = open(file_path_history, 'rb')
    historyfile.seek(0)
    history = pickle.load(historyfile)
    fig = plt.figure(1, figsize=(10, 5))

    plt.subplot(1, 2, 1)
    plt.plot(history.history["acc"])
    plt.plot(history.history["val_acc"])
    plt.title("Model accuracy")
    plt.ylabel("accuracy")
    plt.xlabel("epoch")
    plt.legend(["train", "test"], loc="upper left")
    # summarize history for loss
    plt.subplot(1, 2, 2)
    plt.plot(history.history["loss"])
    plt.plot(history.history["val_loss"])
    plt.title("Model loss")
    plt.ylabel("loss")
    plt.xlabel("epoch")
    plt.legend(["train", "test"], loc="upper left")
    plt.show()